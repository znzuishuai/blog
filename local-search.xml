<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>1.14</title>
    <link href="/blog/2025/01/16/1-14/"/>
    <url>/blog/2025/01/16/1-14/</url>
    
    <content type="html"><![CDATA[<p><strong>主域名</strong>（Second-level domain）是域名的倒数第二个部分，例如在域名<em>example.baidu.com</em>中，<em>baidu.com</em>就是主域名。主域名通常由两个或两个以上的字母构成，中间由点号隔开，整个域名通常只有1个点号。例如，百度的主域名是<em>baidu.com</em>。</p><p><strong>子域名</strong>（Subdomain）则是在主域名前面加上不同的前缀构成的，通常比主域名多一个点或两个点。子域名可以根据站点不同性质在主域名前面加上不同的前缀构成，如<em><a href="http://www.baidu.com/">www.baidu.com</a></em>和<em>map.baidu.com</em>。子域名可以继续划分为子域的子域，形成多级子域名结构。例如，<em><a href="http://www.example.aliyun.com/">www.example.aliyun.com</a></em>是<em>exampl**e.aliyun.com</em>的子域名，而<em>example.aliyun.com</em>又是<em>aliyun.com</em>的子域名。</p><h1 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h1><h1 id="开发语言"><a href="#开发语言" class="headerlink" title="开发语言"></a>开发语言</h1><p>asp,php,aspx,jsp,java,python,ruby,html,javascript等</p><h1 id="中间件容器"><a href="#中间件容器" class="headerlink" title="中间件容器"></a>中间件容器</h1><p>支撑网站运行的东西</p><p><img src="/blog/image/image-20250114200520904.png" alt="image-20250114200520904"></p><p>针对不同源码，有更好的选择</p><h1 id="数据库类型"><a href="#数据库类型" class="headerlink" title="数据库类型"></a>数据库类型</h1><p>用来存储网站数据</p><p><img src="/blog/image/image-20250114200712880.png" alt="image-20250114200712880"></p><h1 id="第三方软件"><a href="#第三方软件" class="headerlink" title="第三方软件"></a>第三方软件</h1><h1 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h1><p>程序的名字</p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p><strong>SQL注入</strong>是一种常见的网络攻击技术，它不是通过利用操作系统的漏洞，而是针对程序员在编程时的疏忽，通过构造特殊的SQL语句来实现非法访问或操作数据库。攻击者可以通过SQL注入获取无权限的数据，甚至修改和删除数据库中的重要信息。</p><h1 id="文件安全"><a href="#文件安全" class="headerlink" title="文件安全"></a>文件安全</h1><p>代码写的关于文件写的产生的漏洞</p><p><img src="/blog/image/image-20250114201642030.png" alt="image-20250114201642030"></p><p>问题在源码里</p><p><img src="/blog/image/image-20250114203448949.png" alt="image-20250114203448949"></p><p>设置这个地址，抓包</p><h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><p>文件 200是OK的 404不存在</p><p>文件夹 403存在 404不在</p><p>3xx跳转 处置过程   判断可有可无</p><p>5xx内部错误  服务器问题  判断可有可无</p><h1 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h1><p>Accept：指定客户端能够接收的内容类型。</p><p>Accept-Charset：浏览器可以接受的字符编码集。</p><p>Accept-Encoding：指定浏览器可以支持的web服务器返回内容压缩编码类型。</p><p>Accept-Language：浏览器可接受的语言。</p><p>Accept-Ranges：可以请求网页实体的一个或者多个子范围字段。</p><p>AuthorizationHTTP：授权的授权证书。</p><p>Cache-Control：指定请求和响应遵循的缓存机制。</p><p>Connection：表示是否需要持久连接。（HTTP 1.1默认进行持久连接）</p><p>CookieHTTP：请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</p><p>Content-Length：请求的内容长度。</p><p>Content-Type：请求的与实体对应的MIME信息。</p><p>Date：请求发送的日期和时间。</p><p>Expect：请求的特定的服务器行为。</p><p>From：发出请求的用户的Email。</p><p>Host：指定请求的服务器的域名和端口号。</p><p>If-Match：只有请求内容与实体相匹配才有效。</p><p>If-Modified-Since：如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码。</p><p>If-None-Match：如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变。</p><p>If-Range：如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。</p><p>If-Unmodified-Since：只在实体在指定时间之后未被修改才请求成功。</p><p>Max-Forwards：限制信息通过代理和网关传送的时间。</p><p>Pragma：用来包含实现特定的指令。</p><p>Proxy-Authorization：连接到代理的授权证书。</p><p>Range：只请求实体的一部分，指定范围。</p><p>Referer：先前网页的地址，当前请求网页紧随其后,即来路。</p><p>TE：客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息。</p><p>Upgrade：向服务器指定某种传输协议以便服务器进行转换（如果支持。</p><p>User-AgentUser-Agent：的内容包含发出请求的用户信息。</p><p>Via：通知中间网关或代理服务器地址，通信协议。</p><p>Warning：关于消息实体的警告信息</p><h2 id="HTTP-状态码分类"><a href="#HTTP-状态码分类" class="headerlink" title="HTTP 状态码分类"></a>HTTP 状态码分类</h2><p>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型。响应分为五类：信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)和服务器错误 (500–599)：</p><table><thead><tr><th align="left">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="left">2**</td><td align="left">成功，操作被成功接收并处理</td></tr><tr><td align="left">3**</td><td align="left">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="left">4**</td><td align="left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="left">5**</td><td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h2 id="HTTP状态码列表"><a href="#HTTP状态码列表" class="headerlink" title="HTTP状态码列表:"></a>HTTP状态码列表:</h2><table><thead><tr><th align="left">状态码</th><th align="left">状态码英文名称</th><th align="left">中文描述</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">Continue</td><td align="left">继续。客户端应继续其请求</td></tr><tr><td align="left">101</td><td align="left">Switching Protocols</td><td align="left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">请求成功。一般用于GET与POST请求</td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="left">已创建。成功请求并创建了新的资源</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="left">已接受。已经接受请求，但未处理完成</td></tr><tr><td align="left">203</td><td align="left">Non-Authoritative Information</td><td align="left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="left">部分内容。服务器成功处理了部分GET请求</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">300</td><td align="left">Multiple Choices</td><td align="left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="left">查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td align="left">305</td><td align="left">Use Proxy</td><td align="left">使用代理。所请求的资源必须通过代理访问</td></tr><tr><td align="left">306</td><td align="left">Unused</td><td align="left">已经被废弃的HTTP状态码</td></tr><tr><td align="left">307</td><td align="left">Temporary Redirect</td><td align="left">临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">客户端请求的语法错误，服务器无法理解</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="left">请求要求用户的身份认证</td></tr><tr><td align="left">402</td><td align="left">Payment Required</td><td align="left">保留，将来使用</td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td align="left">405</td><td align="left">Method Not Allowed</td><td align="left">客户端请求中的方法被禁止</td></tr><tr><td align="left">406</td><td align="left">Not Acceptable</td><td align="left">服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td align="left">407</td><td align="left">Proxy Authentication Required</td><td align="left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td align="left">408</td><td align="left">Request Time-out</td><td align="left">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td align="left">409</td><td align="left">Conflict</td><td align="left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td align="left">410</td><td align="left">Gone</td><td align="left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td align="left">411</td><td align="left">Length Required</td><td align="left">服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td align="left">412</td><td align="left">Precondition Failed</td><td align="left">客户端请求信息的先决条件错误</td></tr><tr><td align="left">413</td><td align="left">Request Entity Too Large</td><td align="left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td align="left">414</td><td align="left">Request-URI Too Large</td><td align="left">请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td align="left">415</td><td align="left">Unsupported Media Type</td><td align="left">服务器无法处理请求附带的媒体格式</td></tr><tr><td align="left">416</td><td align="left">Requested range not satisfiable</td><td align="left">客户端请求的范围无效</td></tr><tr><td align="left">417</td><td align="left">Expectation Failed（预期失败）</td><td align="left">服务器无法满足请求头中 Expect 字段指定的预期行为。</td></tr><tr><td align="left">418</td><td align="left">I’m a teapot</td><td align="left">状态码 418 实际上是一个愚人节玩笑。它在 RFC 2324 中定义，该 RFC 是一个关于超文本咖啡壶控制协议（HTCPCP）的笑话文件。在这个笑话中，418 状态码是作为一个玩笑加入到 HTTP 协议中的。</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">服务器内部错误，无法完成请求</td></tr><tr><td align="left">501</td><td align="left">Not Implemented</td><td align="left">服务器不支持请求的功能，无法完成请求</td></tr><tr><td align="left">502</td><td align="left">Bad Gateway</td><td align="left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td align="left">503</td><td align="left">Service Unavailable</td><td align="left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td align="left">504</td><td align="left">Gateway Time-out</td><td align="left">充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td align="left">505</td><td align="left">HTTP Version not supported</td><td align="left">服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>1.14题</title>
    <link href="/blog/2025/01/16/1-14%E9%A2%98/"/>
    <url>/blog/2025/01/16/1-14%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一<img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20250113220803960.png" alt="image-20250113220803960"></h1><p>感觉是答案和admin有关</p><p><img src="/blog/image/15.png" alt="15"></p><p>有个admin，only可能是1</p><p><img src="/blog/image/image-20250113221334435.png" alt="image-20250113221334435"></p><p>ctfhub{8ebefd0acf262a9ec4e56899}</p><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p><img src="/blog/image/image-20250113223353159.png" alt="image-20250113223353159"></p><p>先抓包</p><p><img src="/blog/image/image-20250113223516767.png" alt="image-20250113223516767"></p><p><img src="/blog/image/image-20250113223555832.png" alt="image-20250113223555832"></p><p>没有显示，诱人的give me flag 点击他！</p><p><img src="/blog/image/image-20250113223903668.png" alt="image-20250113223903668"></p><p>传给repeater</p><p><img src="/blog/image/image-20250113223934500.png" alt="image-20250113223934500"></p><p>ctfhub{ccdc59dd621497d091d70348}</p><h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p>先抓包</p><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20250113214639085.png" alt="image-20250113214639085"></p><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20250113214744762.png" alt="image-20250113214744762"></p><p>放行是这个，说GET不行，用CTFHUB</p><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20250113214849184.png" alt="image-20250113214849184"></p><h1 id="四"><a href="#四" class="headerlink" title="四"></a>四</h1><p><img src="/blog/image/image-20250114160514796.png" alt="image-20250114160514796"></p><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20250114160600036.png" alt="image-20250114160600036"></p><p>要解密这个，抓包看看</p><p><img src="/blog/image/image-20250114160600036.png" alt="image-20250114160600036"></p><p><img src="/blog/image/image-20250114162325436.png" alt="image-20250114162325436"></p><p>爆破，账户是admin,密码是附件</p><p><img src="/blog/image/image-20250114163630166.png" alt="image-20250114163630166"></p><p>将附件都弄成这样的形式（自己输入的账户和密码，解码的样子）</p><p>给到，Intruder爆破，</p><p>选好这个，ADD一下<img src="/blog/image/image-20250114172116276.png" alt="image-20250114172116276"></p><p><img src="/blog/image/image-20250114172139329.png" alt="image-20250114172139329"></p><p>选好文件，加个前缀，编码方式</p><p>ctfhub{4ee900d7609f99d4948ccb39}</p><p>选200的，再看response</p><p><img src="/blog/image/image-20250114172139329.png" alt="image-20250114172139329"></p><h1 id="五"><a href="#五" class="headerlink" title="五"></a>五</h1><p><img src="/blog/image/image-20250114172902100.png" alt="image-20250114172902100"></p><p>响应包源代码，我觉得可以直接检查，看她的源代码</p><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20250114172947684.png" alt="image-20250114172947684"></p><p> ctfhub{e728fd8a5b714b3fe0a44a6c} </p><h1 id="六"><a href="#六" class="headerlink" title="六"></a>六</h1><p>挨个目录<img src="/blog/image/image-20250114173700384.png" alt="image-20250114173700384">找（点开之后长得都一样，但是大标题会变，英语看不懂）</p><p><img src="/blog/image/image-20250114173935555.png" alt="image-20250114173935555"></p><p><img src="/blog/image/image-20250114173952622.png" alt="image-20250114173952622"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ctfhub</span>&#123;<span class="hljs-number">1433</span>c68ae0cec09d350f1eba&#125;<br></code></pre></td></tr></table></figure><h1 id="七"><a href="#七" class="headerlink" title="七"></a>七</h1><p><img src="/blog/image/image-20250114174204603.png" alt="image-20250114174204603"></p><p>东西有点多，感觉应该可以查找，试试看</p><p><img src="/blog/image/image-20250114174341067.png" alt="image-20250114174341067"></p><p><img src="/blog/image/image-20250114174418421.png" alt="image-20250114174418421"></p><h1 id="八"><a href="#八" class="headerlink" title="八"></a>八</h1><p><img src="/blog/image/image-20250114182720640.png" alt="image-20250114182720640"></p><p><img src="/blog/image/image-20250114182744342.png" alt="image-20250114182744342"></p><p>放到bp中挨个试，将文件名放在第一个，后缀在processing中add，还有个点</p><p><img src="/blog/image/image-20250114182819584.png" alt="image-20250114182819584"></p><p>将这个RAW 复制到proxy中，打开浏览器是个文件太好了！</p><p><img src="/blog/image/image-20250114183906999.png" alt="image-20250114183906999"></p><p>但是不好的是，点开这个flag是where is flag??(我真的崩溃了)（我从网上查找资料，说txt，也可以当作网站似的）<a href="http://challenge-56afe07f92cccdad.sandbox.ctfhub.com:10800/flag_263712747.txt%E6%89%93%E5%BC%80%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E5%BE%97%E5%88%B0">http://challenge-56afe07f92cccdad.sandbox.ctfhub.com:10800/flag_263712747.txt打开这个网站得到</a></p><p><img src="/blog/image/image-20250114184610094.png" alt="image-20250114184610094"></p><h1 id="九"><a href="#九" class="headerlink" title="九"></a>九</h1><p><img src="/blog/image/image-20250114185159465.png" alt="image-20250114185159465"></p><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20250114185213672.png" alt="image-20250114185213672"></p><p>大概率是提示吧，什么在index.php里面</p><p>抓包试试</p><p><img src="/blog/image/image-20250114185213672.png" alt="image-20250114185213672"></p><p>结合一下上个题的经验，改一下，HTTp试试</p><p><img src="/blog/image/image-20250114185715385.png" alt="image-20250114185715385"></p><p>不行，题目是bak（投机取巧一下），在原链接后面加上&#x2F;index.php.bak试试</p><p><img src="/blog/image/image-20250114185916939.png" alt="image-20250114185916939"></p><p>芜湖，看起来有救了</p><p><img src="/blog/image/image-20250114190004486.png" alt="image-20250114190004486"></p><p>可以，把它放到文本文件里，拿下！</p><p>ctfhub{046a33d8e1d4bd024c25dc4e}</p><h1 id="十"><a href="#十" class="headerlink" title="十"></a>十</h1><p>不知道什么是vim编辑器，题目上说会异常关闭但是会有缓存</p><p>从网上查了</p><p><img src="/blog/image/image-20250114191347464.png" alt="image-20250114191347464"></p><p>用刚刚的方式试一下</p><p><img src="/blog/image/image-20250114191500506.png" alt="image-20250114191500506"></p><p>得到</p><p>ctfhub{3a1ba77e788214e7776c67ef}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>1.13题</title>
    <link href="/blog/2025/01/16/1-13%E9%A2%98/"/>
    <url>/blog/2025/01/16/1-13%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>攻击的协议在防火墙上面</p><p><img src="/blog/image/12.png" alt="12"></p><p>棱角</p><h1 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h1><p>内网(a,b,c)可以主动<img src="/blog/image/13.png" alt="13">找外网，但是外网不能主动找内网,外网只能找到那个圈那里</p><h2 id="nc的作用"><a href="#nc的作用" class="headerlink" title="nc的作用"></a>nc的作用</h2><p><img src="/blog/image/14.png" alt="14"></p><p><a href="https://blog.csdn.net/qq_40647372/article/details/132730351">Linux命令200例：nc非常有用的网络工具（常用）_nc命令-CSDN博客</a></p><h1 id="正反向问题"><a href="#正反向问题" class="headerlink" title="正反向问题"></a>正反向问题</h1><p>防火墙，入站严格，出站宽松</p><p>当防火墙打开时，尽可能让对方出来找我们</p><p>正反向指的是以谁为基本，对方写的东西来找我们，从他们的角度是正向，从我们的角度是反向</p><p>-FOfa</p><p>linux命令和cmd命令</p><p><a href="https://blog.csdn.net/weixin_51631278/article/details/123238981">关于cmd命令和Linux命令之间的区别差异_linux和cmd的区别-CSDN博客</a></p><h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><p><img src="/blog/image/image-20250113185800931.png" alt="image-20250113185800931"></p><p><img src="/blog/image/image-20250113185904393.png" alt="image-20250113185904393"></p><p><img src="/blog/image/image-20250113185946169.png" alt="image-20250113185946169"></p><p><img src="/blog/image/image-20250113190002408.png" alt="image-20250113190002408"></p><p><img src="/blog/image/image-20250113190031944.png" alt="image-20250113190031944"></p><h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><p>回旋，就是会告诉我们成没成功</p><p>在有的情况下没有回旋，就要用到这个</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>1-13</title>
    <link href="/blog/2025/01/16/1-13/"/>
    <url>/blog/2025/01/16/1-13/</url>
    
    <content type="html"><![CDATA[<h1 id="Proxy-代理"><a href="#Proxy-代理" class="headerlink" title="Proxy(代理)"></a>Proxy(代理)</h1><p>用来抓包</p><p><img src="/blog/image/1.png" alt="1"></p><p>1.open browser</p><p>输入个网<img src="/blog/image/2.png" alt="2">址</p><p>2.intercept is on &#x2F;off</p><p>拦截的作用</p><p><img src="/blog/image/3.png" alt="3"></p><p>3.forward放包（放行），drop丢包，action操作</p><h1 id="Intruder"><a href="#Intruder" class="headerlink" title="Intruder"></a>Intruder</h1><p>对数据包进行批量处理</p><p><img src="/blog/image/4.png" alt="4"></p><h1 id="repeater"><a href="#repeater" class="headerlink" title="repeater"></a>repeater</h1><p>和Intruder差不多，但是一次只能改一个</p><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><p>超文本传输协议（web浏览器和web服务器的通信的东西）</p><p><img src="/blog/image/5.png" alt="5"></p><p><img src="/blog/image/6.png" alt="6"></p><p><img src="/blog/image/7.png" alt="7"></p><p><img src="/blog/image/8.png" alt="8"></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><img src="/blog/image/9.png" alt="9"></p><p>先抓包</p><p><img src="/blog/image/10.png" alt="10"></p><p>放行是这个，说GET不行，用CTFHUB</p><p><img src="/blog/image/11.png" alt="11"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/blog/2025/01/16/test/"/>
    <url>/blog/2025/01/16/test/</url>
    
    <content type="html"><![CDATA[<p><img src="/blog/image/1.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2025/01/16/hello-world/"/>
    <url>/blog/2025/01/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
